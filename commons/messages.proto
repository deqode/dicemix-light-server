syntax = "proto3";

package commons;

// for obtaining Status Code from response messages from server
// to parse response into suitable object
message GenericResponse {
  uint32 Code = 1;
}

// Response returned by server when attempt to join dicemix
// S_JOIN_RESPONSE
message RegisterResponse {
  uint32 Code = 1;
  sint32 Id = 2;
  string Timestamp = 3;
  string Message = 4;
  string Err = 5;
}

// Response returned by server for -
// StartDiceMix - Code S_START_DICEMIX 
// KeyExchangeResponse - Code S_KEY_EXCHANGE
// DCSimpleResponse - Code S_SIMPLE_DC_VECTOR
message DiceMixResponse {
  uint32 Code = 1;
  repeated PeersInfo Peers = 2;
  string Timestamp = 3;
  string Message = 4;
  string Err = 5;
}

// Sub-message for DiceMixResponse
message PeersInfo {
  int32 Id = 1;
  bytes PublicKey = 2;
  uint32 NumMsgs = 3;
  repeated uint64 DCVector = 4;
  repeated bytes DCSimpleVector = 5;
}

// For broadcasting our public key
// to initiate KeyExchange
// Code - C_KEY_EXCHANGE
message KeyExchangeRequest {
  uint32 Code = 1;
  sint32 Id = 2;
  bytes PublicKey = 3;
  uint32 NumMsgs = 4;
  string Timestamp = 5;
}

// For broadcasting our DC Exponential Vector
// to initiate DC-EXP
// Code - C_EXP_DC_VECTOR
message DCExpRequest {
  uint32 Code = 1;
  sint32 Id = 2;
  repeated uint64 DCExpVector = 3;
  string Timestamp = 4;
}

// Response against DCExpRequest
// conatins ROOTS calculated by server using FLINT
// Code - S_EXP_DC_VECTOR
message DCExpResponse {
  uint32 Code = 1;
  repeated uint64 Roots = 2;
  string Timestamp = 3;
  string Message = 4;
  string Err = 5;
}

// For broadcasting our DC Simple Vector
// to initiate DC-SIMPLE
// C_SIMPLE_DC_VECTOR
message DCSimpleRequest {
  uint32 Code = 1;
  sint32 Id = 2;
  repeated bytes DCSimpleVector = 3;
  string Timestamp = 4;
}