package main

import (
	"log"
	"sync"
)

// Hub maintains the set of active clients and broadcasts messages to the
// clients.
type Hub struct {
	// Registered clients.
	clients map[*Client]bool

	// Inbound messages from the clients.
	broadcast chan []byte

	// Register requests from the clients.
	register chan *Client

	// Unregister requests from clients.
	unregister chan *Client

	// to ensure Mutual Exclusion
	sync.Mutex

	// to provide peers id
	counter uint32
}

func newHub() *Hub {
	return &Hub{
		broadcast:  make(chan []byte),
		register:   make(chan *Client),
		unregister: make(chan *Client),
		clients:    make(map[*Client]bool),
		counter:    0,
	}
}

func (h *Hub) run() {
	for {
		select {
		case client := <-h.register:
			log.Printf("hub - request to register new client")
			h.clients[client] = true
			client.send <- []byte("Welcome to CoinShuffle++")
			// client.send <- generatePeerID(h)

		case client := <-h.unregister:
			if _, ok := h.clients[client]; ok {
				delete(h.clients, client)
				close(client.send)
			}
		case message := <-h.broadcast:
			log.Printf("hub - request to broadcast message from client")
			for client := range h.clients {
				select {
				case client.send <- message:
				default:
					close(client.send)
					delete(h.clients, client)
				}
			}
		}
	}
}

// func generatePeerID(h *Hub) []byte {
// 	h.Lock()
// 	defer h.Unlock()
// 	h.counter++

// 	joinTx := &commons.JoinTx{
// 		ID: proto.Uint32(h.counter),
// 	}

// 	data, err := proto.Marshal(joinTx)
// 	if err != nil {
// 		log.Fatal("marshaling error: ", err)
// 	}

// 	return data
// }
